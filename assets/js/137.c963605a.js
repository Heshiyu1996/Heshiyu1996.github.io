(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{472:function(t,s,a){"use strict";a.r(s);var e=a(29),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-fiber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-fiber"}},[t._v("#")]),t._v(" React Fiber")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("React Fiber")]),t._v("是React16中新的协调引擎。\n它可以实现任务分割，让调度算法（reconciliation）能够暂停、恢复")]),t._v(" "),a("p",[t._v("update: 2020-04-11")])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#react-fiber"}},[t._v("React Fiber")]),a("ul",[a("li",[a("a",{attrs:{href:"#fiber的原因"}},[t._v("Fiber的原因")])]),a("li",[a("a",{attrs:{href:"#原理"}},[t._v("原理")])]),a("li",[a("a",{attrs:{href:"#具体实现机制"}},[t._v("具体实现机制")])]),a("li",[a("a",{attrs:{href:"#其它"}},[t._v("其它")])]),a("li",[a("a",{attrs:{href:"#fiber-的衍生产物-custom-renderer"}},[t._v("Fiber 的衍生产物 Custom Renderer")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"fiber的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber的原因"}},[t._v("#")]),t._v(" Fiber的原因")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("React的核心流程分为两部分：")]),t._v(" "),a("ul",[a("li",[t._v("reconciliation（调度算法）\n"),a("ul",[a("li",[t._v("更新state/props、调用生命周期钩子、生成virtual dom、通过diff算法、重新渲染")])])]),t._v(" "),a("li",[t._v("commit\n"),a("ul",[a("li",[t._v("操作dom节点更新")])])])])]),t._v(" "),a("p",[t._v("原因：大量的组件渲染会导致主进程长时间被占用，导致出现卡顿和掉帧的情况。")]),t._v(" "),a("p",[t._v("旧状：因为在之前的调度算法中，React对组件树是通过"),a("strong",[t._v("同步递归渲染")]),t._v("，并且无法暂停和恢复。")]),t._v(" "),a("h2",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("p",[a("code",[t._v("React Fiber")]),t._v("可以实现任务分割。")]),t._v(" "),a("p",[t._v("主要原理是："),a("strong",[t._v("将任务分割成一个个独立的小任务，将这些小任务分散到浏览器的各个空闲期间（由requestIdleCallback告知）执行")]),t._v("。（根据不同的优先级）")]),t._v(" "),a("p",[t._v("特点是：能充分利用"),a("strong",[t._v("主进程的事件循环机制")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"大致数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大致数据结构"}},[t._v("#")]),t._v(" 大致数据结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5300246369/2160/0f3c/47b9/2535662b0dbc1eb8eb49a618270d4d95.png",alt:"alt"}})]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fiber")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("instance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向第一个 child 节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向父节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向第一个兄弟节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" previous"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fiber节点里的Hooks链表")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Hooks "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <-- 伪代码")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h2",{attrs:{id:"具体实现机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具体实现机制"}},[t._v("#")]),t._v(" 具体实现机制")]),t._v(" "),a("h3",{attrs:{id:"暂停和恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂停和恢复"}},[t._v("#")]),t._v(" 暂停和恢复")]),t._v(" "),a("p",[t._v("React V16将"),a("code",[t._v("reconciliation")]),t._v("进行了重构（"),a("code",[t._v("stack reconciler")]),t._v(" -> "),a("code",[t._v("fiber reconciler")]),t._v("），变成了 "),a("strong",[t._v("简单的链表遍历")]),t._v("。")]),t._v(" "),a("p",[t._v("通过指针映射，每个单元都记录着上一步、下一步，从而变得可以被暂停和恢复。")]),t._v(" "),a("h3",{attrs:{id:"分散执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分散执行"}},[t._v("#")]),t._v(" 分散执行")]),t._v(" "),a("p",[t._v("通过两个新API："),a("code",[t._v("requestIdleCallback")]),t._v("、"),a("code",[t._v("requestAnimationFrame")])]),t._v(" "),a("h4",{attrs:{id:"requestidlecallback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestidlecallback"}},[t._v("#")]),t._v(" requestIdleCallback")]),t._v(" "),a("p",[t._v("浏览器提供的事件循环空闲期的回调函数。低优先级的任务交给"),a("code",[t._v("requestIdleCallback")])]),t._v(" "),a("p",[a("code",[t._v("requestIdleCallback")]),t._v("API：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestIdleCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器在空闲时，会执行这个回调，同时会给回调传入一个dealine对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在dealine对象中包含着浏览器目前有多少时间供我们执行")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dealine"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" IdleDeadline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为了避免浏览器因繁忙且无剩余时间导致的饿死，可传入一个超时时间来强制让浏览器执行回调。")]),t._v("\n    option"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"requestanimationframe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestanimationframe"}},[t._v("#")]),t._v(" requestAnimationFrame")]),t._v(" "),a("p",[t._v("高优先级的任务交给"),a("code",[t._v("requestAnimationFrame")])]),t._v(" "),a("h2",{attrs:{id:"其它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),a("p",[t._v("Fiber 比 Stack 的方式要花费更多的内存占用和执行性能，但React 基于 Fiber 的思路会让 JS 执行性能提升。")]),t._v(" "),a("h2",{attrs:{id:"fiber-的衍生产物-custom-renderer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-的衍生产物-custom-renderer"}},[t._v("#")]),t._v(" Fiber 的衍生产物 Custom Renderer")]),t._v(" "),a("p",[t._v("它定义了一系列标准化的接口，使我们不必关心 Fiber 内部是如何工作的，就可以通过虚拟 DOM 的方式驱动宿主环境。")]),t._v(" "),t._v(" --\x3e")])}),[],!1,null,null,null);s.default=r.exports}}]);